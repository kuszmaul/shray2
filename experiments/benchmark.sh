#!/bin/sh

set -eu

hash sed
hash sbatch
hash basename
hash dirname
hash find
hash gnuplot
hash head
hash seq
hash m4
hash grep

if [ "$#" -lt 2 ]; then
	printf "Usage: benchmark.sh BINDIR OUTPUTDIR MMDIR\n\n" >&2
	printf "\tBINDIR:    Build directory as generated by CMake.\n" >&2
	printf "\tOUTPUTDIR: Directory to store benchmark results.\n" >&2
	exit 1
fi

bindir="$1"
outputdir="$2"

curdate=$(date -u '+%Y-%m-%dT%H:%M:%S+00:00')
datadir="$outputdir/$curdate"
mkdir -p "$datadir"

scriptsdir="$datadir/scripts"
mkdir -p "$scriptsdir"

printf 'Running benchmarks with output directory '\''%s'\''\n' \
	"$datadir"

# Obtain system information
if ! sbatch --wait ./systeminfo.sh "$datadir"; then
	printf 'Error while running systeminfo.sh via sbatch\n' >&2
	exit 1
fi

# Cluster configuration
max_ntasks_per_node=8
max_ntasks=64

# Generate scripts and run them
for threadtype in single multi; do
	ntasks=1
	ntasks_per_node=1
	while [ "$ntasks" -le "$max_ntasks" ]; do
		if [ "$ntasks" -le "$max_ntasks_per_node" ]; then
			nodes=1
			ntasks_per_node="$ntasks"
		else
			nodes=$((ntasks / max_ntasks_per_node))
			ntasks_per_node="$max_ntasks_per_node"
		fi

		name="./benchmark.$threadtype.$nodes.$ntasks"
		gen_script="$name.sh"
		gen_output="$name.txt"
		m4 -EP \
			-D "__NTASKS__=[[[$ntasks]]]" \
			-D "__NODES__=[[[$nodes]]]" \
			-D "__THREADTYPE__=[[[$threadtype]]]" \
			-D "__NTASKS_PER_NODE__=[[[$ntasks_per_node]]]" \
			-- ./benchmark_run.sh >"$gen_script"

		printf 'Running configuration (%s tasks/threads, %s nodes, %s tasks per node, %s)\n' \
			"$ntasks" \
			"$nodes" \
			"$ntasks_per_node" \
			"$threadtype"
		if ! sbatch --wait "$gen_script" "$bindir" "$datadir"; then
			printf 'Error while running %s via sbatch\n' "$gen_script" >&2
			exit 1
		fi

		# TODO: print failed count properly
		# failed=$(grep -c 'result: FAILED' "$gen_output")
		# if [ "$failed" -gt 0 ]; then
		# 	printf 'Script %s had %s failed benchmarks\n' \
		# 		"$gen_script" \
		# 		"$failed"
		# fi

		mv "$gen_script" "$scriptsdir"
		mv "$gen_output" "$scriptsdir"

		ntasks=$(( 2 * ntasks ))
	done
done


# Generate plots.
mkdir -p "$datadir/plots"
for thread_type in single multi; do
	for exp in "$datadir/$thread_type"/*; do
		example=$(basename "$exp")

		# Go through all parameters used for a benchmark.
		for paramsdir in "$exp"/*; do
			params=$(basename "$paramsdir")

			# Go through all implementations of that benchmark.
			for implementation in "$paramsdir"/*; do
				implementation=$(basename "$implementation")
				resultdir="$paramsdir/$implementation"
				[ -f "$resultdir/graph.data" ] && rm "$resultdir/graph.data"

				# Group the data per number of processors.
				find "$resultdir/1" -name '*.gflops' -exec basename -s '.gflops' {} \; \
					| sort -n \
					| while IFS= read -r nproc; do
					for testrun in "$resultdir"/*; do
						if [ ! -d "$testrun" ]; then
							continue
						fi
						result=$(cat "$testrun/$nproc.gflops")
						printf '%s\n' "$result" >>"$resultdir/$nproc.raw"
					done
				done

				# Generate the data for the graphs.
				find "$resultdir" -name '*.raw' -exec basename {} \; \
					| sort -n \
					| while IFS= read -r nproc_result; do
					nproc=$(basename "$nproc_result" .raw)
					python3 calc.py "$resultdir/$nproc_result" "$resultdir/$nproc.result"
					result=$(cat "$resultdir/$nproc.result")
					printf '%s, %s\n' "$nproc" "$result" >>"$resultdir/graph.data"
				done
			done

			# Generate the plot for this specific benchmark.
			gnuplot -c benchmark_gflops.gpi \
				"$example ($params, $thread_type)" \
				"$datadir/plots" \
				"$paramsdir/chapel/graph.data" \
				"$paramsdir/fortran/graph.data" \
				"$paramsdir/globalarrays/graph.data" \
				"$paramsdir/shray/graph.data" \
				"$paramsdir/scala/graph.data" \
				"$paramsdir/upc/graph.data"
		done
	done
done
