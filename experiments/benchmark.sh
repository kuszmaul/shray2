#!/bin/sh

set -eu

hash sed
hash sbatch
hash basename
hash dirname
hash find
hash gnuplot
hash head
hash seq
hash m4
hash grep

if [ "$#" -ne 5 ]; then
	printf "Usage: benchmark_run.sh BINDIR_OMPI BINDIR_MPICH OUTPUTDIR SCRIPTDIR\n\n" >&2
	printf "\tBINDIR_OMPI:    Build directory as generated by CMake (openmpi).\n" >&2
	printf "\tBINDIR_MPICH:   Build directory as generated by CMake (mpich).\n" >&2
	printf "\tOUTPUTDIR:      Directory to store benchmark results.\n" >&2
	printf "\tSCRIPTDIR:      Directory where additional scripts are located.\n" >&2
	printf "\tVOLDIR:         Directory where long-term files (e.g. CG) are generated.\n" >&2
	exit 1
fi

bindir_ompi="$1"
bindir_mpich="$2"
outputdir="$3"
scriptdir="$4"
voldir="$5"

curdate=$(date -u '+%Y-%m-%dT%H:%M:%S+00:00')
datadir="$outputdir/$curdate"
mkdir -p "$datadir"

scriptsdir="$datadir/scripts"
mkdir -p "$scriptsdir"

printf 'Running benchmarks with output directory '\''%s'\''\n' \
	"$datadir"

# Obtain system information
printf 'Obtaining system configuration\n'
if ! sbatch --quiet --wait ./systeminfo.sh "$datadir"; then
	printf 'Error while running systeminfo.sh via sbatch\n' >&2
	exit 1
fi

# Sleep to wait for SLURM to finish writing to the output file.
sleep 5
rm ./systeminfo.txt

# Cluster configuration
max_ntasks_per_node=8
max_ntasks=64

types="multi"

# Generate scripts and run them
for threadtype in $types; do
	ntasks=1
	ntasks_per_node=1
	while [ "$ntasks" -le "$max_ntasks" ]; do
		if [ "$ntasks" -le "$max_ntasks_per_node" ]; then
			nodes=1
			ntasks_per_node="$ntasks"
		else
			nodes=$((ntasks / max_ntasks_per_node))
			ntasks_per_node="$max_ntasks_per_node"
		fi

		name="./benchmark.$threadtype.$nodes.$ntasks"
		gen_script="$name.sh"
		gen_output="$name.txt"
		m4 -EP \
			-D "__NTASKS__=[[[$ntasks]]]" \
			-D "__NODES__=[[[$nodes]]]" \
			-D "__THREADTYPE__=[[[$threadtype]]]" \
			-D "__NTASKS_PER_NODE__=[[[$ntasks_per_node]]]" \
			-- ./benchmark_run.sh >"$gen_script"

		printf 'Running configuration (%s tasks/threads, %s nodes, %s tasks/threads per node, %s)\n' \
			"$ntasks" \
			"$nodes" \
			"$ntasks_per_node" \
			"$threadtype"
		if ! sbatch --quiet --wait "$gen_script" "$bindir_ompi" "$bindir_mpich" "$datadir" "$scriptdir" "$voldir"; then
			printf 'Error while running %s via sbatch\n' "$gen_script" >&2
			exit 1
		fi

		# Sleep to wait for SLURM to finish writing to the output file.
		sleep 5

		if failed=$(grep -c 'result: FAILED' "$gen_output"); then
			printf '\tFAILED: %s\n' \
				"$failed"
		fi

		mv "$gen_script" "$scriptsdir"
		mv "$gen_output" "$scriptsdir"

		ntasks=$(( 2 * ntasks ))
	done
done

# Generate plots.
mkdir -p "$datadir/plots/single"
mkdir -p "$datadir/plots/multi"
for thread_type in $types; do
	for exp in "$datadir/$thread_type"/*; do
		example=$(basename "$exp")

		# Go through all parameters used for a benchmark.
		for paramsdir in "$exp"/*; do
			params=$(basename "$paramsdir")

			# Go through all implementations of that benchmark.
			for implementation in "$paramsdir"/*; do
				implementation=$(basename "$implementation")
				resultdir="$paramsdir/$implementation"
				[ -f "$resultdir/graph.data" ] && rm "$resultdir/graph.data"

				# Group the data per number of processors.
				find "$resultdir/1" -name '*.gflops' -exec basename -s '.gflops' {} \; \
					| sort -n \
					| while IFS= read -r nproc; do
					for testrun in "$resultdir"/*; do
						if [ ! -d "$testrun" ]; then
							continue
						fi
						result=$(cat "$testrun/$nproc.gflops")
						printf '%s\n' "$result" >>"$resultdir/$nproc.raw"
					done
				done

				# Generate the data for the graphs.
				find "$resultdir" -name '*.raw' -exec basename {} \; \
					| sort -n \
					| while IFS= read -r nproc_result; do
					nproc=$(basename "$nproc_result" .raw)
					python3 calc.py "$resultdir/$nproc_result" "$resultdir/$nproc.result"
					result=$(cat "$resultdir/$nproc.result")
					if [ "$nproc" -lt "$max_ntasks_per_node" ]; then
						nodes=1
					else
						nodes=$((nproc / max_ntasks_per_node))
					fi
					printf '%s_{%s}, %s\n' "$nproc" "$nodes" "$result" >>"$resultdir/graph.data"
				done
			done

			# Generate the plot for this specific benchmark.
			filtered=$(printf '%s' "$example" | tr _ ' ')
			gnuplot -c benchmark_gflops.gpi \
				"$filtered ($params)" \
				"$datadir/plots/$thread_type" \
				"$paramsdir/scala/graph.data" \
				"$paramsdir/chapel/graph.data" \
				"$paramsdir/globalarrays/graph.data" \
				"$paramsdir/shray/graph.data" \
				"$paramsdir/fortran/graph.data" \
				"$paramsdir/upc/graph.data" \
				"Number of processors_{number of nodes}"
		done
	done
done
