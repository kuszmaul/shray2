#!/bin/sh

set -eu

hash sed
hash sbatch
hash basename
hash dirname
hash find
hash gnuplot
hash head
hash seq

if [ "$#" -lt 2 ]; then
	printf "Usage: benchmark.sh BINDIR OUTPUTDIR MMDIR\n\n" >&2
	printf "\tBINDIR:    Build directory as generated by CMake.\n" >&2
	printf "\tOUTPUTDIR: Directory to store benchmark results.\n" >&2
	exit 1
fi

bindir="$1"
outputdir="$2"

curdate=$(date -u '+%Y-%m-%dT%H:%M:%S+00:00')
datadir="$outputdir/$curdate"
mkdir -p "$datadir"

printf 'Running benchmarks with output directory '\''%s'\''\n' \
	"$datadir"

# Obtain system information
sbatch --wait ./systeminfo.sh

# One rank per node (multiple threads)
NODES=1
NTASKS=8
while [ $NODES -le 8 ]; do
	genfile="./benchmark_run_tmp.sh"

	sed "s/__NODES__/$NODES/g" ./benchmark_run.sh >"$genfile"
	sed -i "s/__NTASKS__/$NTASKS/g" "$genfile"
	sed -i "s/__THREADTYPE__/multi/g" "$genfile"
	sbatch --wait "$genfile" "$bindir" "$datadir"

	rm "$genfile"

	NODES=$(( 2 * NODES ))
done

# Many ranks per node (single threaded)
NODES=1
while [ $NODES -le 8 ]; do
	NTASKS=$(( 8 * NODES ))

	genfile="./benchmark_run_tmp.sh"

	sed "s/__NODES__/$NODES/g" ./benchmark_run.sh >"$genfile"
	sed -i "s/__NTASKS__/$NTASKS/g" "$genfile"
	sed -i "s/__THREADTYPE__/single/g" "$genfile"
	sbatch --wait "$genfile" "$bindir" "$datadir"

	rm "$genfile"

	NODES=$(( 2 * NODES ))
done

# Generate plots.
mkdir -p "$datadir/plots/single"
mkdir -p "$datadir/plots/multi"
for exp in "$datadir"/*; do
	example=$(basename "$exp")

	if [ ! -d "$exp" ] || [ "$example" = plots ]; then
		continue
	fi

	# Go through all parameters used for a benchmark.
	for paramsdir in "$exp"/*; do
		params=$(basename "$paramsdir")

		for thread_type in single multi; do
			# Go through all implementations of that benchmark.
			for implementation in "$paramsdir/$thread_type"/*; do
				implementation=$(basename "$implementation")
				resultdir="$paramsdir/$thread_type/$implementation"
				[ -f "$resultdir/graph.data" ] && rm "$resultdir/graph.data"

				# Group the data per number of processors.
				find "$resultdir/1" -name '*.gflops' -exec basename -s '.gflops' {} \; \
					| sort -n \
					| while IFS= read -r nproc; do
					for testrun in "$resultdir"/*; do
						if [ ! -d "$testrun" ]; then
							continue
						fi
						result=$(cat "$testrun/$nproc.gflops")
						printf '%s\n' "$result" >>"$resultdir/$nproc.raw"
					done
				done

				# Generate the data for the graphs.
				find "$resultdir" -name '*.raw' -exec basename {} \; \
					| sort -n \
					| while IFS= read -r nproc_result; do
					nproc=$(basename "$nproc_result" .raw)
					python3 calc.py "$resultdir/$nproc_result" "$resultdir/$nproc.result"
					result=$(cat "$resultdir/$nproc.result")
					printf '%s, %s\n' "$nproc" "$result" >>"$resultdir/graph.data"
				done
			done

			# Generate the plot for this specific benchmark.
			gnuplot -c benchmark_gflops.gpi \
				"$example ($params, $thread_type)" \
				"$datadir/plots" \
				"$paramsdir/$thread_type/chapel/graph.data" \
				"$paramsdir/$thread_type/fortran/graph.data" \
				"$paramsdir/$thread_type/globalarrays/graph.data" \
				"$paramsdir/$thread_type/shray/graph.data" \
				"$paramsdir/$thread_type/scala/graph.data" \
				"$paramsdir/$thread_type/upc/graph.data"
		done
	done
done
