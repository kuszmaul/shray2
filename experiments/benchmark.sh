#!/bin/sh

#SBATCH --account=csmpi
#SBATCH --nodes=8
#SBATCH --ntasks=64
#SBATCH --ntasks-per-node=8
#SBATCH --partition=csmpi_long
#SBATCH --time=08:00:00
#SBATCH --output=benchmark.txt

# A script to automatically benchmark test programs.

set -eu

# Ensure required programs exist.

# General.
hash basename
hash dirname
hash find
hash gnuplot
hash head
hash mpirun # General MPI applications (e.g. fortran/globalarrays)
hash seq

# Chapel.
hash chpl

# Fortran.
hash gfortran

# GASNet.
hash gasnet_trace
hash gasnetrun_mpi

# GlobalArrays
hash ga-config

# UPC.
hash upcc
hash upcrun

if [ "$#" -lt 3 ]; then
	printf "Usage: benchmark.sh BINDIR OUTPUTDIR MMDIR\n\n" >&2
	printf "\tBINDIR:    Build directory as generated by CMake.\n" >&2
	printf "\tOUTPUTDIR: Directory to store benchmark results.\n" >&2
	printf "\tMMDIR:     Directory containing Matrix Market files\n">&2
	printf "\t           generated by csr_parser split by number of\n" >&2
	printf "\t           nodes, e.g. to test cage{9,12,15} for {1,2} nodes\n" >&2
	printf "\t           the given directory must look as follows:\n\n" >&2
	printf "\t\t         MMDIR\n" >&2
	printf "\t\t         |-- 1\n" >&2
	printf "\t\t         |   |-- cage12.mtx\n" >&2
	printf "\t\t         |   |   |-- cage12.mtx\n" >&2
	printf "\t\t         |   |   |-- cage12.mtx_column1\n" >&2
	printf "\t\t         |   |   |-- cage12.mtx_info1\n" >&2
	printf "\t\t         |   |   |-- cage12.mtx_row1\n" >&2
	printf "\t\t         |   |   |-- cage12.mtx_values1\n" >&2
	printf "\t\t         |   |-- cage15.mtx\n" >&2
	printf "\t\t         |   |   |-- cage15.mtx\n" >&2
	printf "\t\t         |   |   |-- cage15.mtx_column1\n" >&2
	printf "\t\t         |   |   |-- cage15.mtx_info1\n" >&2
	printf "\t\t         |   |   |-- cage15.mtx_row1\n" >&2
	printf "\t\t         |   |   |-- cage15.mtx_values1\n" >&2
	printf "\t\t         |   |-- cage9.mtx\n" >&2
	printf "\t\t         |       |-- cage9.mtx\n" >&2
	printf "\t\t         |       |-- cage9.mtx_column1\n"1 >&2
	printf "\t\t         |       |-- cage9.mtx_info1\n" >&2
	printf "\t\t         |       |-- cage9.mtx_row1\n" >&2
	printf "\t\t         |       |-- cage9.mtx_values1\n" >&2
	printf "\t\t         |-- 2\n" >&2
	printf "\t\t             |-- cage12.mtx\n" >&2
	printf "\t\t             |   |-- cage12.mtx\n" >&2
	printf "\t\t             |   |-- cage12.mtx_column1\n" >&2
	printf "\t\t             |   |-- cage12.mtx_column2\n" >&2
	printf "\t\t             |   |-- cage12.mtx_info1\n" >&2
	printf "\t\t             |   |-- cage12.mtx_info2\n" >&2
	printf "\t\t             |   |-- cage12.mtx_row1\n" >&2
	printf "\t\t             |   |-- cage12.mtx_row2\n" >&2
	printf "\t\t             |   |-- cage12.mtx_values1\n" >&2
	printf "\t\t             |   |-- cage12.mtx_values2\n" >&2
	printf "\t\t             |-- cage15.mtx\n" >&2
	printf "\t\t             |   |-- cage15.mtx\n" >&2
	printf "\t\t             |   |-- cage15.mtx_column1\n" >&2
	printf "\t\t             |   |-- cage15.mtx_column2\n" >&2
	printf "\t\t             |   |-- cage15.mtx_info1\n" >&2
	printf "\t\t             |   |-- cage15.mtx_info2\n" >&2
	printf "\t\t             |   |-- cage15.mtx_row1\n" >&2
	printf "\t\t             |   |-- cage15.mtx_row2\n" >&2
	printf "\t\t             |   |-- cage15.mtx_values1\n" >&2
	printf "\t\t             |   |-- cage15.mtx_values2\n" >&2
	printf "\t\t             |-- cage9.mtx\n" >&2
	printf "\t\t                 |-- cage9.mtx\n" >&2
	printf "\t\t                 |-- cage9.mtx_column1\n" >&2
	printf "\t\t                 |-- cage9.mtx_column2\n" >&2
	printf "\t\t                 |-- cage9.mtx_info1\n" >&2
	printf "\t\t                 |-- cage9.mtx_info2\n" >&2
	printf "\t\t                 |-- cage9.mtx_row1\n" >&2
	printf "\t\t                 |-- cage9.mtx_row2\n" >&2
	printf "\t\t                 |-- cage9.mtx_values1\n" >&2
	printf "\t\t                 |-- cage9.mtx_values2\n" >&2
	exit 1
fi

bindir="$1"
outputdir="$2"
mmdir="$3"
failed=0

# Create the new data directory.
curdate=$(date -u '+%Y-%m-%dT%H:%M:%S+00:00')
datadir="$outputdir/$curdate"
mkdir -p "$datadir"

printf 'Running benchmarks with output directory '\''%s'\''\n' \
	"$datadir"

# Create a file with the system parameters.
{
	printf 'Benchmark system configuration on %s\n' "$curdate"

	printf '\n----------\nChapel:\n'
	chpl --version

	printf '\n----------\nFortran:\n'
	gfortran --version

	printf '\n----------\nGlobalArrays:\n'
	ga-config --version

	printf '\n----------\nMPI:\n'
	mpirun --version

	printf '\n----------\nGASNet:\n'
	# gasnet_trace exits with an error code on help messages, gasnetrun_mpi
	# does not support a version argument.
	if gasnet_trace -h; then
		true
	fi

	printf '\n----------\nUPC:\n'
	upcc --network=mpi --version
}>"$datadir/system.txt"

# Run the given test, writes 0 to the gflops file if the test fails.
# $1: output file name
# $1: gflops file name
# $2: complete test invocation
runtest_wrapper()
{
	outfile="$1"
	gflopsfile="$2"
	shift
	shift

	printf '\n\tinvocation: %s\n\toutput file: %s\n\tresult: ' \
		"$*" \
		"$outfile"

	tstart=$(date -u '+%Y-%m-%dT%H:%M:%S+00:00')
	if ! "$@" >"$gflopsfile" 2>"$outfile"; then
		printf '0.0\n' >"$gflopsfile"
		printf 'FAILED\n'
		failed=$((failed + 1))
	else
		printf 'SUCCESS\n'
	fi
	tend=$(date -u '+%Y-%m-%dT%H:%M:%S+00:00')
	printf '\ttime: (%s, %s)\n' "$tstart" "$tend"
}

# Run a single test program for the given type.
# $1: test type
# $2: number of processors
# $3: executable
# $4: arguments to the program WITHOUT special strings.
# $5: test number
# remainder: arguments to the program as it expects them
runtest()
{
	test_type="$1"
	nproc="$2"
	example="$3"
	argsstr="$4"
	testnumber="$5"
	shift;shift;shift;shift;shift

	printf '%s: ' "$test_type"

	testdir="$datadir/$example/$argsstr/$test_type"
	resultdir="$testdir/$testnumber"
	mkdir -p "$resultdir"

	outfile="$resultdir/$nproc.out"
	gflopsfile="$resultdir/$nproc.gflops"

	if [ "$test_type" = shray ]; then
		#runtest_wrapper "$outfile" "$gflopsfile" \
		#	"$bindir/examples/$test_type/${example}_profile_${test_type}" \
		#	"$nproc" \
		#	"$@"
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			-n "$nproc" \
			"$bindir/examples/$test_type/${example}_profile_${test_type}" \
			"$@"
	elif [ "$test_type" = chapel ]; then
		# Manually set the node count for Chapel since it will not
		# distribute properly otherwise.
		if [ "$nproc" -le 8 ]; then
			export GASNET_CSPAWN_CMD="srun -N 1 -n %N %C"
		else
			count=$((nproc / 8))
			export GASNET_CSPAWN_CMD="srun -N $count -n %N %C"
		fi
		runtest_wrapper "$outfile" "$gflopsfile" \
			"$bindir/examples/$test_type/${example}_$test_type" \
			-nl "$nproc" \
			"$@"
	elif [ "$test_type" = fortran ]; then
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			-n "$nproc" \
			"$bindir/examples/$test_type/${example}_$test_type" \
			"$@"
	elif [ "$test_type" = globalarrays ]; then
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			-n "$nproc" \
			"$bindir/examples/$test_type/${example}_$test_type" \
			"$@"
	elif [ "$test_type" = upc ]; then
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			-n "$nproc" \
			"$bindir/examples/$test_type/${example}_$test_type" \
			"$@"
		# Filter out UPC-specific stderr messages
		sed -i '/^UPCR:/d' "$gflopsfile"
	elif [ "$test_type" = scala ]; then
		./scalapack_generator.sh ${nproc} 250 "$@"
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			-n "$nproc" \
			xdpblas3tim
	else
		printf 'Unknown test type: %s' "$test_type" >&2
		exit 1
	fi
}

## Inform GASNet how to start.
export GASNET_SPAWNFN="C"

## UDP-conduit max timeout in microseconds, default is 30000000 (30 seconds)
## 0 is infinite timeout.
export GASNET_REQUESTTIMEOUT_MAX=0

# UPC shared heap configuration
export UPC_SHARED_HEAP_SIZE="4G"

# Run all tests.
for i in $(seq 1 10); do
for nproc in 1 2 4 8; do # 16 32 64; do
	# 1D stencil.
	for size in 20480000 40960000; do
		for iter in 1000 2000; do
			printf '\nBenchmark 1D 3-point stencil (%s nodes, %s size, %s iter)\n' \
				"$nproc" \
				"$size" \
				"$iter"
			runtest chapel "$nproc" 1dstencil "$size $iter" "$i" "--N=$size" "--ITERATIONS=$iter"
			runtest fortran "$nproc" 1dstencil "$size $iter" "$i" "$size" "$iter"
			runtest globalarrays "$nproc" 1dstencil "$size $iter" "$i" "$size" "$iter"
			runtest upc "$nproc" 1dstencil "$size $iter" "$i" "$size" "$iter"

			export SHRAY_WORKERTHREADS=0
			export SHRAY_CACHEFACTOR=2
			runtest shray "$nproc" 1dstencil "$size $iter" "$i" "$size" "$iter"
		done
	done

	# Sparse matrix-vector multiplication (monopoly)
	for size in 204800; do # 20480000; do
		for iterations in 50; do
			printf '\nBenchmark spmv monopoly (run %s, %s nodes, %s x %s, %s iter)\n' \
				"$i" \
				"$nproc" \
				"$size" \
				"$size" \
				"$iterations"

			runtest chapel "$nproc" monopoly "$size $iterations" "$i" "--n=$size" "--iterations=$iterations"
			runtest fortran "$nproc" monopoly "$size $iterations" "$i" "$size" "$iterations"
			runtest globalarrays "$nproc" monopoly "$size $iterations" "$i" "$size" "$iterations"
			runtest upc "$nproc" monopoly "$size $iterations" "$i" "$size" "$iterations"

			export SHRAY_WORKERTHREADS=0
			export SHRAY_CACHEFACTOR="$nproc"
			runtest shray "$nproc" monopoly "$size $iterations" "$i" "$size" "$iterations"
		done
	done

	# Sparse matrix-vector multiplication
	for matrixdir in "$mmdir/$nproc"/*; do
		matrix=$(basename "$matrixdir")
		for iterations in 50 100; do
			printf '\nBenchmark spmv (%s nodes, %s matrix, %s iter)\n' \
				"$nproc" \
				"$matrix" \
				"$iterations"

			runtest chapel "$nproc" spmv "$matrix $iterations" "$i" "--fileName=$matrixdir/$matrix" "--iterations=$iterations"
			runtest fortran "$nproc" spmv "$matrix $iterations" "$i" "$matrixdir/$matrix" "$iterations"
			runtest globalarrays "$nproc" spmv "$matrix $iterations" "$i" "$matrixdir/$matrix" "$iterations"
			runtest upc "$nproc" spmv "$matrix $iterations" "$i" "$matrixdir/$matrix" "$iterations"

			export SHRAY_WORKERTHREADS=0
			export SHRAY_CACHEFACTOR="$nproc"
			runtest shray "$nproc" spmv "$matrix $iterations" "$i" "$matrixdir/$matrix" "$iterations"
		done
	done
done

# Matrix, weak scaling.
testdirname="2146 3036 4296 6080 8608 12192 17280"
for i in "1 2146" "2 3036" "4 4296" "8 6080" "16 8608" "32 12192" "64 17280"; do
	set -- $i
	nproc="$1"
	size="$2"

	printf '\nBenchmark matrix multiplication (%s nodes, %s x %s)\n' \
		"$nproc" \
		"$size" \
		"$size"

	export SHRAY_WORKERTHREADS=0
	export SHRAY_CACHEFACTOR=2
	runtest shray "$nproc" matrix "$testdirname" "$i" "$size"

	runtest chapel "$nproc" matrix "$testdirname" "$i" "--n=$size"
	runtest fortran "$nproc" matrix "$testdirname" "$i" "$size"
	runtest globalarrays "$nproc" matrix "$testdirname" "$i" "$size"
	runtest upc "$nproc" matrix "$testdirname" "$i" "$size"
	runtest scala "$nproc" matrix "$testdirname" "$i" "$size"
done
done

# Generate plots.
mkdir -p "$datadir/plots"
for exp in "$datadir"/*; do
	example=$(basename "$exp")

	if [ ! -d "$exp" ] || [ "$example" = plots ]; then
		continue
	fi

	# Go through all parameters used for a benchmark.
	for paramsdir in "$exp"/*; do
		params=$(basename "$paramsdir")


		# Go through all implementations of that benchmark.
		for implementation in "$paramsdir"/*; do
			implementation=$(basename "$implementation")
			resultdir="$paramsdir/$implementation"
			[ -f "$resultdir/graph.data" ] && rm "$resultdir/graph.data"

			# Group the data per number of processors.
			find "$resultdir/1" -name '*.gflops' -exec basename -s '.gflops' {} \; \
				| sort -n \
				| while IFS= read -r nproc; do
				for testrun in "$resultdir"/*; do
					if [ ! -d "$testrun" ]; then
						continue
					fi
					result=$(cat "$testrun/$nproc.gflops")
					printf '%s\n' "$result" >>"$resultdir/$nproc.raw"
				done
			done

			# Generate the data for the graphs.
			find "$resultdir" -name '*.raw' -exec basename {} \; \
				| sort -n \
				| while IFS= read -r nproc_result; do
				nproc=$(basename "$nproc_result" .raw)
				python3 calc.py "$resultdir/$nproc_result" "$resultdir/$nproc.result"
				result=$(cat "$resultdir/$nproc.result")
				printf '%s, %s\n' "$nproc" "$result" >>"$resultdir/graph.data"
			done
		done

		# Generate the plot for this specific benchmark.
		gnuplot -c benchmark_gflops.gpi \
			"$example ($params)" \
			"$datadir/plots" \
			"$paramsdir/chapel/graph.data" \
			"$paramsdir/fortran/graph.data" \
			"$paramsdir/globalarrays/graph.data" \
			"$paramsdir/shray/graph.data" \
			"$paramsdir/scala/graph.data" \
			"$paramsdir/upc/graph.data"
	done
done

if [ "$failed" -ne 0 ]; then
	printf '\nNOTE: %s benchmarks failed during execution. A value of 0.0 will be used in the generated graphs.\n' \
		"$failed" >&2
fi
