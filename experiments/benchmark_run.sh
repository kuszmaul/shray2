#!/bin/sh

#SBATCH --account=csmpi
#SBATCH --ntasks=__NTASKS__
#SBATCH --nodes=__NODES__
#SBATCH --ntasks-per-node=8
#SBATCH --threads-per-core=1
#SBATCH --partition=csmpi_long
#SBATCH --time=08:00:00
#SBATCH --output=benchmark(__THREADTYPE__)(__NODES__)(__NTASKS__).txt

# A script to automatically benchmark test programs.

set -eu

# Ensure required programs exist.

# General.
hash mpirun # General MPI applications (e.g. fortran/globalarrays)
hash seq

# Chapel.
hash chpl

# Fortran.
hash gfortran

# GASNet.
hash gasnet_trace
hash gasnetrun_mpi

# GlobalArrays
hash ga-config

# UPC.
hash upcc
hash upcrun

# UDP gasnet conduit
hash amudprun

if [ "$#" -ne 2 ]; then
	printf "Usage: benchmark_run.sh BINDIR OUTPUTDIR\n\n" >&2
	printf "\tBINDIR:         Build directory as generated by CMake.\n" >&2
	printf "\tOUTPUTDIR:      Directory to store benchmark results.\n" >&2
	exit 1
fi

bindir="$1"
datadir="$2"

ntasks=__NTASKS__
nodes=__NODES__
thread_type=__THREADTYPE__

# Run the given test. Writes 0 to the gflops file if the test fails.
# $1: output file name
# $1: gflops file name
# remainder: complete test invocation
runtest_wrapper()
{
	outfile="$1"
	gflopsfile="$2"
	shift 2

	printf '\n\tinvocation: %s\n\toutput file: %s\n\tresult: ' \
		"$*" \
		"$outfile"

	tstart=$(date -u '+%Y-%m-%dT%H:%M:%S+00:00')
	if ! "$@" >"$gflopsfile" 2>"$outfile"; then
		printf '0.0\n' >"$gflopsfile"
		printf 'FAILED\n'
		failed=$((failed + 1))
	else
		printf 'SUCCESS\n'
	fi
	tend=$(date -u '+%Y-%m-%dT%H:%M:%S+00:00')
	printf '\ttime: (%s, %s)\n' "$tstart" "$tend"
}

# Run a single test program for the given type.
# $1: test type
# $2: executable
# $3: arguments to the program WITHOUT special strings.
# $4: test number
# remainder: arguments to the program as it expects them
runtest()
{
	test_type="$1"
	example="$2"
	argsstr="$3"
	testnumber="$4"
	shift 5

	printf '%s: ' "$test_type"

	testdir="$datadir/$example/$argsstr/$thread_type/$test_type"
	resultdir="$testdir/$testnumber"
	mkdir -p "$resultdir"

	outfile="$resultdir/$ntasks.out"
	gflopsfile="$resultdir/$ntasks.gflops"

	if [ "$test_type" = shray ]; then
		if [ "$thread_type" = multi ]; then
			export SHRAY_PAR=y
		else
			unset SHRAY_PAR
		fi
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			"$bindir/examples/$test_type/${example}_profile_${test_type}" \
			"$@"
	elif [ "$test_type" = chapel ]; then
		runtest_wrapper "$outfile" "$gflopsfile" \
			"$bindir/examples/$test_type/${example}_$test_type" \
			-nl "$nodes" \
			"$@"
	elif [ "$test_type" = fortran ]; then
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			"$bindir/examples/$test_type/${example}_$test_type" \
			"$@"
	elif [ "$test_type" = globalarrays ]; then
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			"$bindir/examples/$test_type/${example}_$test_type" \
			"$@"
	elif [ "$test_type" = upc ]; then
		# TODO: upc
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			"$bindir/examples/$test_type/${example}_$test_type" \
			"$@"
		# Filter out UPC-specific stderr messages
		sed -i '/^UPCR:/d' "$gflopsfile"
	elif [ "$test_type" = scala ]; then
		./scalapack_generator.sh ${ntasks} 250 "$@"
		runtest_wrapper "$outfile" "$gflopsfile" \
			mpirun \
			xdpblas3tim
	else
		printf 'Unknown test type: %s' "$test_type" >&2
		exit 1
	fi
}

## Inform GASNet how to start.
export GASNET_SPAWNFN="C"
export GASNET_CSPAWN_CMD="srun -N %N %C"
export CHPL_RT_NUM_THREADS_PER_LOCALE=8

## UDP-conduit max timeout in microseconds, default is 30000000 (30 seconds)
## 0 is infinite timeout.
export GASNET_REQUESTTIMEOUT_MAX=0

# UPC shared heap configuration
export UPC_SHARED_HEAP_SIZE="4G"

# Run all tests.
for i in $(seq 1 1); do

	# 1D stencil.
	export SHRAY_CACHEFACTOR=2
	for size in 20480000; do # 40960000; do
		for iter in 1000; do #2000; do
			printf '\nBenchmark 1D 3-point stencil (%s, %s nodes, %s size, %s iter)\n' \
				"$nproc" \
				"$size" \
				"$iter"
			#runtest chapel "$nproc" 1dstencil "$size $iter" "$i" "--N=$size" "--ITERATIONS=$iter"
			#runtest fortran "$nproc" 1dstencil "$size $iter" "$i" "$size" "$iter"
			#runtest globalarrays "$nproc" 1dstencil "$size $iter" "$i" "$size" "$iter"
			#runtest upc "$nproc" 1dstencil "$size $iter" "$i" "$size" "$iter"

			runtest shray 1dstencil "$size $iter" "$i" "$size" "$iter"
		done
	done

	# Sparse matrix-vector multiplication (monopoly)
	export SHRAY_CACHEFACTOR="$nproc"
	#for size in 204800; do # 20480000; do
	#	for iterations in 50; do
	#		printf '\nBenchmark spmv monopoly (run %s, %s nodes, %s x %s, %s iter)\n' \
	#			"$i" \
	#			"$nproc" \
	#			"$size" \
	#			"$size" \
	#			"$iterations"

	#		runtest chapel "$nproc" monopoly "$size $iterations" "$i" "--n=$size" "--iterations=$iterations"
	#		#runtest fortran "$nproc" monopoly "$size $iterations" "$i" "$size" "$iterations"
	#		#runtest globalarrays "$nproc" monopoly "$size $iterations" "$i" "$size" "$iterations"
	#		#runtest upc "$nproc" monopoly "$size $iterations" "$i" "$size" "$iterations"

	#		#runtest shray "$nproc" monopoly "$size $iterations" "$i" "$size" "$iterations"
	#	done
	#done

# Matrix, weak scaling.
#testdirname="2146 3036 4296 6080 8608 12192 17280"
export SHRAY_CACHEFACTOR=2
#for j in "1 2146" "2 3036" "4 4296" "8 6080"; do # "16 8608" "32 12192" "64 17280"; do
#	set -- $j
#	nproc="$1"
#	size="$2"
#
#	printf '\nBenchmark matrix multiplication (%s nodes, %s x %s)\n' \
#		"$nproc" \
#		"$size" \
#		"$size"
#
#	#export SHRAY_CACHEFACTOR=2
#	#export OPENBLAS_NUM_THREADS=1
#	#runtest shray "$nproc" matrix "$testdirname" "$i" "$size"
#
#	runtest chapel "$nproc" matrix "$testdirname" "$i" "--n=$size"
#	#runtest fortran "$nproc" matrix "$testdirname" "$i" "$size"
#	#runtest globalarrays "$nproc" matrix "$testdirname" "$i" "$size"
#	#runtest upc "$nproc" matrix "$testdirname" "$i" "$size"
#	#runtest scala "$nproc" matrix "$testdirname" "$i" "$size"
#done
done
